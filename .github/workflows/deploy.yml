name: Deploy

on:
    push:
        branches:
            - production

jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        env:
            repository: "spatie/mubd3a.sa"
            host: "mubd3a.sa"
            username: "forge"
            baseDir: "/home/forge/mubd3a-test.sa"
            newReleaseName: "${{ github.run_id }}"

        steps:
            - name: ‚úã Load Slack committer
              id: slack-committer
              uses: spatie/slack-committer@1.0.2

            - name: üåç Set environment variables
              run: |
                  echo "releasesDir=${{ env.baseDir }}/releases" >> $GITHUB_ENV

            - name: üåè Set environment variables (part 2)
              run: |
                  echo "releasesDir=${{ env.baseDir }}/releases" >> $GITHUB_ENV
                  echo "persistentDir=${{ env.baseDir }}/persistent" >> $GITHUB_ENV
                  echo "currentDir=${{ env.baseDir }}/current" >> $GITHUB_ENV
                  echo "newReleaseDir=${{ env.releasesDir }}/${{ env.newReleaseName }}" >> $GITHUB_ENV

            - name: üåÄ Clone repository
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      [ -d ${{ env.releasesDir }} ] || mkdir ${{ env.releasesDir }}
                      [ -d ${{ env.persistentDir }}/uploads ] || mkdir ${{ env.persistentDir }}/uploads
                      [ -d ${{ env.persistentDir }}/storage ] || mkdir ${{ env.persistentDir }}/storage

                      cd ${{ env.releasesDir }}

                      # Create new directory
                      mkdir ${{ env.newReleaseDir }}

                      # Clone directory
                      git clone --depth 1 git@github.com:${{ env.repository }} ${{ env.newReleaseName }}

                      # Configure sparse checkout
                      cd ${{ env.newReleaseDir }}
                      git config core.sparsecheckout true
                      echo "*" > .git/info/sparse-checkout
                      echo "!storage" >> .git/info/sparse-checkout
                      echo "!public/build" >> .git/info/sparse-checkout
                      git read-tree -mu HEAD

                      # Mark release
                      cd ${{ env.newReleaseDir }}
                      echo "${{ env.newReleaseName }}" > public/release-name.txt

            - name: üöö Run composer
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      cd ${{ env.newReleaseDir }}
                      ln -nfs ${{ env.baseDir }}/auth.json auth.json;
                      composer install --prefer-dist --no-scripts --no-dev -q -o;

            - name: üì¶ Run yarn
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      cd ${{ env.newReleaseDir }};
                      yarn config set ignore-engines true
                      yarn

            - name: üåÖ Generate assets
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      cd ${{ env.newReleaseDir }};
                      yarn run production -- --progress false
                      yarn build-generate-newsletter-prod -- --progress false
                      rm -rf node_modules

            - name: üîó Update symlinks
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      # Remove the storage directory and replace with persistent data
                      rm -rf ${{ env.newReleaseDir }}/storage;
                      cd ${{ env.newReleaseDir }};
                      ln -nfs ${{ env.baseDir }}/persistent/storage storage;

                      # Remove the public/uploads directory and replace with persistent data
                      rm -rf ${{ env.newReleaseDir }}/public/uploads;
                      cd ${{ env.newReleaseDir }};
                      ln -nfs ${{ env.baseDir }}/persistent/uploads public/uploads;

                      # Symlink the og images to the public directory
                      rm -rf ${{ env.newReleaseDir }}/public/og-images;
                      cd ${{ env.newReleaseDir }};
                      ln -nfs ${{ env.baseDir }}/persistent/storage/og-images ${{ env.newReleaseDir }}/public/og-images;

                      # Import the environment config
                      cd ${{ env.newReleaseDir }};
                      ln -nfs ${{ env.baseDir }}/.env .env;

                      # Symlink the persistent fonts to the public directory
                      cd ${{ env.baseDir }}/persistent/fonts
                      git pull origin master
                      ln -nfs ${{ env.baseDir }}/persistent/fonts ${{ env.newReleaseDir }}/public/fonts;

            - name: ‚ú® Optimize installation
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      cd ${{ env.newReleaseDir }};
                      php artisan clear-compiled;

            - name: üìÄ Backup database
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      cd ${{ env.newReleaseDir }}
                      php artisan backup:run

            - name: üôà Migrate database
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      cd ${{ env.newReleaseDir }}
                      # php artisan migrate --force

            - name: üôè Bless release
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      ln -nfs ${{ env.newReleaseDir }} ${{ env.currentDir }};
                      cd ${{ env.newReleaseDir }}
                      php artisan horizon:terminate
                      php artisan config:clear
                      php artisan view:clear
                      php artisan cache:clear
                      php artisan config:cache
                      php artisan responsecache:clear
                      php artisan schedule-monitor:sync

                      sudo service php7.4-fpm restart
                      sudo supervisorctl restart all

            - name: üöæ Clean up old releases
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.host }}
                  username: ${{ env.username }}
                  key: ${{ secrets.KEY }}
                  script: |
                      cd ${{ env.releasesDir }}
                      ls -dt ${{ env.releasesDir }}/* | tail -n +4 | xargs -d "\n" sudo chown -R forge .;
                      ls -dt ${{ env.releasesDir }}/* | tail -n +4 | xargs -d "\n" rm -rf;

            # -   name: ü•≥ Send deploy succeeded notification
            #     uses: rtCamp/action-slack-notify@master
            #     env:
            #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEPLOY }}
            #         SLACK_USERNAME: 'Spatie'
            #         SLACK_TITLE: 'Deploy of https://github.com/${{ github.repository }} succeeded'
            #         SLACK_MESSAGE: "Well done ${{ steps.slack-committer.outputs.username }} üëç"
            #         SLACK_ICON: 'https://lh5.googleusercontent.com/-kDe1cClrALE/AAAAAAAAAAI/AAAAAAAAAAA/ZpXA_eJKjag/s44-p-k-no-ns-nd/photo.jpg'
            #         SLACK_COLOR: '#04b518'
            #         SLACK_FOOTER: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'

            # -   name: üí• Send deploy failed notification
            #     uses: rtCamp/action-slack-notify@master
            #     if: ${{ failure() }}
            #     env:
            #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEPLOY }}
            #         SLACK_USERNAME: 'Spatie'
            #         SLACK_TITLE: 'Deploy of https://github.com/${{ github.repository }} failed'
            #         SLACK_MESSAGE: "You should fix this: ${{ steps.slack-committer.outputs.username }}"
            #         SLACK_ICON: 'https://lh5.googleusercontent.com/-kDe1cClrALE/AAAAAAAAAAI/AAAAAAAAAAA/ZpXA_eJKjag/s44-p-k-no-ns-nd/photo.jpg'
            #         SLACK_COLOR: '#ff0000'
            #         SLACK_FOOTER: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
